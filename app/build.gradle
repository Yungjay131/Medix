plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

apply from: "${rootProject.projectDir}/dependencies.gradle"

android {
    compileSdk sdk_details.compileSDK

    defaultConfig {
        applicationId sdk_details.applicationID
        minSdk sdk_details.minSDK
        targetSdk sdk_details.targetSDK
        versionCode sdk_details.versionCode
        versionName sdk_details.versionName

        testInstrumentationRunner defaultTestInstrumentationRunner

        //for MeowBottomFragment
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ['-Xjvm-default=compatibility']
    }

    viewBinding{
        enabled = true
    }

    buildFeatures {
        buildConfig = true
    }

    packagingOptions {
        exclude 'assets/com.slyworks.medix.data.room.AppDatabase/1.json'
    }

}

/*android.buildTypes.each{ type ->
    type.buildConfigField 'String', 'SERVER_KEY', SERVER_KEY
}*/

dependencies {
    implementation project(path: ':constants')
    implementation project(path: ':di')
    implementation project(path: ':firebase_commons')
    implementation project(path: ':userdetails')
    implementation project(path: ':auth')
    implementation project(path: ':controller')
    implementation project(path: ':utils')
    implementation project(path: ':communication')
    implementation project(path: ':models')
    implementation project(path: ':network')

    implementation depends.core_ktx
    implementation depends.appcompat
    implementation depends.material
    implementation depends.recyclerview
    implementation depends.constraint_layout
    implementation depends.legacy_support
    implementation depends.cardview
    implementation depends.drawerlayout
    implementation depends.work_runtime
    implementation depends.multidex
    implementation depends.asynclayoutinflater

    implementation depends.lifecycle_viewmodel
    implementation depends.lifecycle_runtime
    implementation depends.lifecycle_livedata

    implementation depends.camera
    implementation depends.camera_lifecycle
    implementation depends.camera_view

    implementation depends.coroutines_android

    implementation depends.glide

    implementation depends.circle_imageview

    implementation depends.rxbinding

    implementation depends.agora_sdk

    implementation depends.easyadapter

    implementation depends.lottie

    implementation depends.timber

    implementation depends.stetho

    implementation depends.navigator

    implementation depends.dagger
    kapt depends.dagger_kapt

    implementation depends.arrow_core_optics
    implementation depends.arrow_fx
    kapt depends.arrow_kapt

    testImplementation depends.junit
    testImplementation depends.mockito_kotlin

    androidTestImplementation depends.android_junit
    androidTestImplementation depends.espresso

    debugImplementation depends.leakcanary
}


/*task runOutcomeUnitTests(){
    doLast{
       exec {
           executable = 'gradle'
           args = [':app:testDebugUnitTest', '--tests', '\"com.slyworks.medix.OutcomeUnitTest\"']
       }
    }
}*/

/*def taskName = "uninstallOldVersionFirst"
android.applicationVariants.all { variant ->
    if (variant.name == "debug") {
        tasks.create(name: taskName) {
            def packageName = variant.applicationId
            doLast {
                exec {
                    executable = 'adb'
                    args = ['uninstall', packageName]
                }
            }
        }
    }
}


tasks.whenTaskAdded({
    if(it.name == "installDebug"){
        it.dependsOn taskName
    }
})*/
