plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id "com.google.protobuf" version "0.8.12"
    //id 'realm-android'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.slyworks.medix"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //for MeowBottomFragment
        vectorDrawables.useSupportLibrary = true


    }

    buildTypes {
       /* debug {
            minifyEnabled true
            shrinkResources true
        }*/
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        // Enables Jetpack Compose for this module
        //compose true
    }

    packagingOptions {
        exclude 'assets/com.slyworks.medix.data.room.AppDatabase/1.json'
    }

}

android.buildTypes.each{ type ->
    type.buildConfigField 'String', 'SERVER_KEY', SERVER_KEY
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.11.0"
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    implementation project(path: ':data')
    implementation project(path: ':network')
    implementation project(path: ':constants')

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'


    //for lifecycle
    def lifecycle_version2 = "1.1.1"
    //implementation "android.arch.lifecycle:extensions:$lifecycle_version2"

    implementation 'androidx.drawerlayout:drawerlayout:1.1.1'
    implementation "androidx.work:work-runtime-ktx:2.7.1"

    implementation 'androidx.multidex:multidex:2.0.1'

    // Kotlin
    //implementation "androidx.concurrent:concurrent-futures-ktx:1.1.0"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'

    //for preferences
    implementation "androidx.preference:preference-ktx:1.2.0"

    
    //for using by viewModels<T>()
    def activity_version = "1.4.0"
    implementation "androidx.activity:activity-ktx:$activity_version"

    implementation "androidx.work:work-runtime-ktx:2.7.1"

    // CameraX core library using the camera2 implementation
    def camerax_version = "1.1.0-beta03"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // If you want to additionally use the CameraX VideoCapture library
    //implementation "androidx.camera:camera-video:${camerax_version}"
    //If you want to additionally use the CameraX View class
    implementation "androidx.camera:camera-view:${camerax_version}"
    // If you want to additionally use the CameraX Extensions library
    //implementation "androidx.camera:camera-extensions:${camerax_version}"

    implementation "androidx.asynclayoutinflater:asynclayoutinflater:1.0.0"

    implementation "androidx.datastore:datastore:1.0.0"
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "com.google.protobuf:protobuf-javalite:3.14.0"

    implementation platform('com.google.firebase:firebase-bom:29.0.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-database-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'

    implementation 'io.reactivex.rxjava3:rxjava:3.1.3'
    //implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'


    def retrofit = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"

    implementation 'com.github.bumptech.glide:glide:4.13.0'
    implementation 'de.hdodenhof:circleimageview:3.1.0'


    implementation 'com.jakewharton.rxbinding4:rxbinding:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-material:4.0.0'

    implementation 'com.jakewharton.rxbinding4:rxbinding-core:4.0.0'
    implementation 'com.jakewharton.rxbinding4:rxbinding-appcompat:4.0.0'

    //Agora RTC SDK for video call
    implementation 'com.github.agorabuilder:native-full-sdk:3.4.1'

    implementation 'com.airbnb.android:lottie:5.0.3'

    /*part of the StickyHeader requirement*/
    implementation 'ru.surfstudio.android:easyadapter:2.0.0'


    def lifecycle_version = "2.5.0-rc01"
    def arch_version = "2.1.0"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    testImplementation 'junit:junit:4.13.2'

    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.0.5'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'
}


/*task runOutcomeUnitTests(){
    doLast{
       exec {
           executable = 'gradle'
           args = [':app:testDebugUnitTest', '--tests', '\"com.slyworks.medix.OutcomeUnitTest\"']
       }
    }
}*/

/*def taskName = "uninstallOldVersionFirst"
android.applicationVariants.all { variant ->
    if (variant.name == "debug") {
        tasks.create(name: taskName) {
            def packageName = variant.applicationId
            doLast {
                exec {
                    executable = 'adb'
                    args = ['uninstall', packageName]
                }
            }
        }
    }
}


tasks.whenTaskAdded({
    if(it.name == "installDebug"){
        it.dependsOn taskName
    }
})*/
